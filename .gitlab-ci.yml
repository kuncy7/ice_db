# Używamy oficjalnego obrazu Pythona
image: python:3.12-slim

# Definiujemy etapy pipeline'u
stages:
  - test

# Definiujemy zmienne, które będą dostępne w całym pipeline
variables:
  # Konfiguracja dla usługi bazy danych PostgreSQL
  POSTGRES_DB: test_db
  POSTGRES_USER: runner
  POSTGRES_PASSWORD: "" # Puste hasło dla uproszczenia
  POSTGRES_HOST_AUTH_METHOD: trust # Pozwala na połączenie bez hasła

test-job:
  stage: test
  
  # Uruchom dodatkowy kontener z PostgreSQL 14, dostępny dla tego zadania
  services:
    - name: postgres:14
      alias: db-postgres

  # Ustawienie zmiennych środowiskowych dla skryptu testującego
  variables:
    # Aplikacja będzie się łączyć z hostem 'db-postgres', a nie 'localhost'
    DATABASE_URL: "postgresql+asyncpg://${POSTGRES_USER}@db-postgres:5432/${POSTGRES_DB}"

  # Komendy do wykonania przed uruchomieniem testów
  before_script:
    - pip install -r requirements.txt
    - pip install -r requirements-dev.txt
    # Instalujemy klienta psql, aby móc załadować schemat
    - apt-get update && apt-get install -y postgresql-client
    # Inicjalizujemy bazę danych w kontenerze usługi
    - PGPASSWORD=$POSTGRES_PASSWORD psql -h db-postgres -U $POSTGRES_USER -d $POSTGRES_DB -f setup_database.sql

  # Główne komendy zadania
  script:
    - echo "Checking code style with Ruff..."
    - ruff check .
    - echo "Running tests with Pytest..."
    - pytest -q
